// Apply Gradle plugins
plugins {
    id 'java'
    id 'eclipse'
    id 'idea'

    id 'com.github.hierynomus.license' version '0.11.0'
    id 'com.github.johnrengelman.shadow' version '1.2.1'
}

defaultTasks 'clean', 'licenseFormat', 'build', 'shadowJar'

// Project information
group = 'net.caseif.quartz'
version = '1.8-R0.1-SNAPSHOT'

sourceCompatibility = 1.6
targetCompatibility = 1.6

// Project repositories
repositories {
    mavenCentral()
    maven {
        // for SrgTools
        name = "caseif-repo"
        url = "http://repo.caseif.net/content/groups/public/"
    }
    maven {
        // required by Mixin
        name = "forge-repo"
        url = "http://files.minecraftforge.net/maven/"
    }
    maven {
        // required by Mixin
        name = "minecraft-repo"
        url = "https://libraries.minecraft.net/"
    }
	flatDir {
		// contains deobfuscated minecraft_server
        dirs 'workspace/lib'
    }
}

configurations {
    sponge
    compile {
        extendsFrom sponge
    }
}

// Project dependencies
dependencies {
    sponge project('SpongeAPI')
    compile project('Mixin')
	compile ':minecraft_server-deobf:1.8'
	compile 'nl.hardijzer.fw.srgtool:srgtool:2.0'
	compile 'org.slf4j:slf4j-simple:1.7.10'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testRuntime 'org.slf4j:slf4j-simple:1.7.7'
}

task mixin {
	ext.srg = "${tasks.mixin.temporaryDir}" + File.separator + 'mixins.srg'
	ext.refMap = "${tasks.mixin.temporaryDir}" + File.separator + 'mixins.quartz.refmap.json';
}

// Read source files using UTF-8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
	options.compilerArgs += [
		'-Xlint:all',
		'-Xlint:-path',
		'-Xlint:-processing',
		"-AreobfSrgFile=./workspace/lib/srg/notch-mcp.srg",
		"-AoutSrgFile=${tasks.mixin.ext.srg}",
		"-AoutRefMapFile=${tasks.mixin.ext.refMap}"
	]
}

test {
    testLogging {
        showStandardStreams = true
    }
}

jar {
    classifier = 'base'
	manifest {
		attributes(
				'Implementation-Title': project.name,
				'Implementation-Version': version,
				'Main-Class': 'net.caseif.quartz.Quartz',
				'Class-Path': 'lib/minecraft_server-deobf-1.8.jar'
		)
	}
}

shadowJar {
	// exclude certs
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
	exclude 'LICENSE'
	exclude 'LICENSE.txt'
	from project.configurations.sponge // include SpongeAPI dependencies
	from tasks.getByPath('Mixin:shadowJar') // include Mixin dependencies
    dependencies {
		include project(':SpongeAPI')
		include project(':Mixin')
		include dependency('nl.hardijzer.srgtool:srgtool')
		include dependency('org.slf4j:slf4j-simple')
		// SpongeAPI
		/*include dependency('com.google.guava:guava:17.0')
		include dependency('com.google.code.findbugs:jsr305:1.3.9')
		include dependency('com.google.inject:guice:4.0-beta5')
		include dependency('com.typesafe:config:1.2.1')
		include dependency('com.flowpowered:flow-math:1.0.0')
		include dependency('org.ow2.asm:asm:5.0.3')*/
	}
	classifier = ''
}

// License header formatting
license {
    header file('LICENSE')
	exclude '*.cfg'
	exclude '*.json'
    exclude '*.txt'
    sourceSets = project.sourceSets
    ignoreFailures false
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

// Disable tests and checkstyle for SpongeAPI
project('SpongeAPI') {
    afterEvaluate { project ->
        configure([assemble, build, compileTestJava, javadoc, javadocJar, sourceJar, licenseFormat]) {
            enabled = false
        }
        tasks.withType(VerificationTask) {
            enabled = false
        }
        tasks.withType(Checkstyle) {
            enabled = false
        }
    }
}

// Disable tests and checkstyle for Mixin
project('Mixin') {
    afterEvaluate { project ->
        configure([assemble, build, compileTestJava, javadoc, javadocJar, sourceJar, licenseFormat]) {
            enabled = false
        }
        tasks.withType(VerificationTask) {
            enabled = false
        }
        tasks.withType(Checkstyle) {
            enabled = false
        }
    }
}
