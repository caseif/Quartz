// Apply Gradle plugins
plugins {
    id 'java'
    id 'eclipse'
    id 'idea'

    id 'com.github.hierynomus.license' version '0.11.0'
    id 'com.github.johnrengelman.shadow' version '1.2.1'
}

defaultTasks 'clean', 'licenseFormat', 'build', 'shadowJar'

// Project information
group = 'net.caseif.quartz'
version = '1.8-R0.1-SNAPSHOT'

sourceCompatibility = 1.6
targetCompatibility = 1.6

// Project repositories
repositories {
    mavenCentral()
    maven {
        name = 'forge-repo'
        url = 'http://files.minecraftforge.net/maven/'
    }
    maven {
        name = 'minecraft'
        url = 'https://libraries.minecraft.net/'
    }
}

// Project dependencies
dependencies {
    compile project('SpongeAPI')
    //compile project('Mixin')
	compile 'net.minecraftforge.srg2source:Srg2Source:3.2-SNAPSHOT'
	compile 'net.minecraft:launchwrapper:1.11'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testRuntime 'org.slf4j:slf4j-simple:1.7.10'
}

// Read source files using UTF-8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    testLogging {
        showStandardStreams = true
    }
}


jar {
    classifier = 'base'
}

shadowJar {
    dependencies {
    }
	classifier = ''
}

// License header formatting
license {
    header file('LICENSE')
    exclude '*.txt'
    sourceSets = project.sourceSets
    ignoreFailures false
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

// Disable tests and checkstyle for SpongeAPI
project('SpongeAPI') {
    afterEvaluate { project ->
        configure([assemble, build, compileTestJava, javadoc, javadocJar, sourceJar, licenseFormat]) {
            enabled = false
        }
        tasks.withType(VerificationTask) {
            enabled = false
        }
        tasks.withType(Checkstyle) {
            enabled = false
        }
    }
}

// Disable tests and checkstyle for Mixin
/*project('Mixin') {
    afterEvaluate { project ->
        configure([assemble, build, compileTestJava, javadoc, javadocJar, sourceJar, licenseFormat]) {
            enabled = false
        }
        tasks.withType(VerificationTask) {
            enabled = false
        }
        tasks.withType(Checkstyle) {
            enabled = false
        }
    }
}*/
