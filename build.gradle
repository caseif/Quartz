// Apply Gradle plugins
plugins {
	id 'java'
	id 'eclipse'
	id 'idea'

	id 'com.github.hierynomus.license' version '0.11.0'
	id 'com.github.johnrengelman.shadow' version '1.2.1'
}

defaultTasks 'clean', 'licenseFormat', 'build', 'shadowJar'

// Project information
group = 'net.caseif.quartz'
version = '1.0.0-SNAPSHOT'

ext.projectName = 'Quartz'
ext.description = 'A wrapper-based implementation of SpongeAPI.'
ext.inceptionYear = '2015'
ext.packaging = 'jar'
ext.versionSuffix = version.contains('SNAPSHOT') && System.getenv('BUILD_NUMBER') ? '-jnks' + System.getenv('BUILD_NUMBER') : ''

sourceCompatibility = 1.7
targetCompatibility = 1.7

// Project repositories
repositories {
	mavenCentral()
    maven {
        // for Mixin -> srg2source
        name = "forge"
        url = "http://files.minecraftforge.net/maven"
    }
    maven {
		// for Mixin
        name = 'minecraft'
        url = 'https://libraries.minecraft.net/'
    }
}

// Project dependencies
dependencies {
	compile project('SpongeAPI')
	compile project('Mixin')

	testCompile 'junit:junit:4.12'
	testCompile 'org.hamcrest:hamcrest-library:1.3'
	testCompile 'org.mockito:mockito-core:1.10.19'
	testRuntime 'org.slf4j:slf4j-simple:1.7.10'
}

// Read source files using UTF-8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

test {
	testLogging {
		showStandardStreams = true
	}
}

jar {
	manifest {
		attributes(
				'Implementation-Title': project.name,
				'Implementation-Version': version,
				'Main-Class': 'com.headswilllol.mineflat.Main',
				'Class-Path': 'lib/lwjgl.jar lib/gson.jar lib/soundsystem/soundsystem.jar ' +
						'lib/soundsystem/librarylwjglopenal.jar lib/soundsystem/codecjorbis.jar lib/guava.jar'
		)
	}
	classifier = '-base'
}

shadowJar  {
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    dependencies {
        include(project('SpongeAPI'))
        include(project('Mixin'))
    }
    classifier = ''
    
}
build.dependsOn(shadowJar)

// License header formatting
license {
	header file('LICENSE')
	exclude '*.txt'
	sourceSets = project.sourceSets
	ignoreFailures false
	strictCheck true
	mapping {
		java = 'SLASHSTAR_STYLE'
	}
}

// Disable tests and checkstyle for SpongeAPI
project('SpongeAPI') {
	afterEvaluate { project ->
		configure([assemble, build, compileTestJava, javadoc, javadocJar, sourceJar, licenseFormat]) {
			enabled = false
		}
		tasks.withType(VerificationTask) {
			enabled = false
		}
		tasks.withType(Checkstyle) {
			enabled = false
		}
	}
}
